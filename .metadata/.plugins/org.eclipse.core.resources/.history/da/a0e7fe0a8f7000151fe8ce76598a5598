package ruichen;
import java.util.ArrayList;
import java.util.Collections;

public class Hand {
	private ArrayList<Card> cards;
	private int size;
	private int[] nOfAKind;
	private boolean isStraight;
	private boolean isFlush;
	
	public Hand(ArrayList<Card> cards){
		Collections.sort(cards);
		this.cards = cards;
		this.size = cards.size();
		this.setISStraight();
		this.isFlush = this.isFlush();
		if(!this.isStraight){
			this.setNOfAKind();
		}
	}
	
	public void setUpState(){
		this.setISStraight();
		this.setIsFlush();
		
	}
	
	public void setISStraight(){
		for(int i = 0; i < this.size - 1; i++) {
			if(cards.get(i + 1).getRank() != cards.get(i).getRank() + 1) {
				this.isStraight = false;
				break;
			}
		}
		this.isStraight = true;
	}
	
	public boolean setIsFlush(){
		for(int i = 0; i < this.size - 1; i++) {
			if(!cards.get(i + 1).getSuit().equals(cards.get(i).getSuit())) {
				this.isStraight = false;
				break;
			}
		}
		this.isStraight = true;
	}
	
	public void setNOfAKind(){
		int num = 1;
		int[] res = {1, 1};
		for(int i = 0; i < this.size - 1; i++) {
			if(cards.get(i + 1).getRank() == cards.get(i).getRank()) {
				num++;
			}
			else{
				if (num > 1){
					if(res[0] > 1) res[1] = num;
					else res[0] = num;
					
					num = 1;
				}
			}
		}
		this.nOfAKind = res;
	}
	
	public boolean isTwoPairs(){
		return (this.nOfAKind[0] == 2 && this.nOfAKind[1] == 2);
	}
	
	public boolean isOnePair(){
		return (this.nOfAKind[0] == 2 && this.nOfAKind[1] == 1) 
				|| (this.nOfAKind[0] == 1 && this.nOfAKind[1] == 2);
	}
	
	public boolean isFullHouse(){
		return (this.nOfAKind[0] == 3 && this.nOfAKind[1] == 2) 
				|| (this.nOfAKind[0] == 2 && this.nOfAKind[1] == 3);	
	}
	
	public boolean isThreeOfAKind(){
		return (this.nOfAKind[0] == 3 && this.nOfAKind[1] == 1);
	}
	
	public boolean isFourOfAKind(){
		return (this.nOfAKind[0] == 4);
	}
	
	public boolean isHighCard(){
		return (this.nOfAKind[0] == 1 && this.nOfAKind[1] == 1);
	}
}
